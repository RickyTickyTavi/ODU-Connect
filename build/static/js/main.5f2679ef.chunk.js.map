{"version":3,"sources":["firstChild.js","parentComponent.js","home.js","about.js","contact.js","profile.js","mynavbar.js","App.js","serviceWorker.js","index.js"],"names":["FirstChild","props","text","ParentComponent","state","counter","l","increment","bind","this","onClick","length","setState","Component","Home","About","Contact","Profile","MyNav","className","to","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAceA,G,YALI,SAACC,GAElB,OAAO,6CAAmBA,EAAMC,KAAzB,e,2CC4BMC,E,YAlCb,WAAYF,GAAQ,IAAD,8BACjB,4CAAMA,KACDG,MAAQ,CACXC,QAAS,EACTC,EAAG,CAAC,QAAS,SAAU,SACvBJ,KAAM,SAEP,EAAKK,UAAY,EAAKA,UAAUC,KAAf,gBAPD,E,sEAWjB,OACE,6BACE,yCAGA,kBAAC,EAAD,CAAYN,KAAMO,KAAKL,MAAMF,OAC7B,4BAAQQ,QAASD,KAAKF,WAAtB,oB,kCAMAE,KAAKL,MAAMC,UAAYI,KAAKL,MAAME,EAAEK,OAAS,EAC/CF,KAAKG,UAAS,SAACR,GAAD,MAAY,CAAEC,QAAS,MAEvCI,KAAKG,UAAS,SAACR,GAAD,MAAY,CAAEC,QAASD,EAAMC,QAAU,MAGrDI,KAAKG,UAAS,SAACR,GAAD,MAAY,CAAEF,KAAME,EAAME,EAAEF,EAAMC,iB,GA/BtBQ,a,gBCUfC,E,iLARX,OACI,6BACI,kBAAC,EAAD,W,GAJOD,aCSJE,E,iLARX,OACI,6BACE,0C,GAJUF,aCULG,E,iLARX,OACI,6BACE,4C,GAJYH,aCUPI,E,iLARX,OACI,6BACE,4C,GAJYJ,aCkFPK,E,iLA5DX,OA+BA,kBAAC,IAAD,KACI,6BACE,yBAAKC,UAAU,kDACf,wBAAIA,UAAU,sBACZ,iDACA,4BAAI,kBAAC,IAAD,CAAMC,GAAI,IAAKD,UAAU,YAAzB,eACJ,4BAAI,kBAAC,IAAD,CAAMC,GAAI,WAAYD,UAAU,YAAhC,YACJ,4BAAI,kBAAC,IAAD,CAAMC,GAAI,WAAYD,UAAU,YAAhC,YACJ,4BAAI,kBAAC,IAAD,CAAMC,GAAI,SAAUD,UAAU,YAA9B,YAKN,6BACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,WAAWC,UAAWP,IAClC,kBAAC,IAAD,CAAOM,KAAK,SAASC,UAAWR,IAChC,kBAAC,IAAD,CAAOO,KAAK,WAAWC,UAAWN,W,GAnD5BJ,aCILW,MAff,WACE,OAEE,yBAAKL,UAAU,OAEf,kBAAC,EAAD,QCJgBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5f2679ef.chunk.js","sourcesContent":["import React from 'react';\n\n// regular JS function is defined like as\n// fucntion Example() {}\n// These are STATELESS\n\n// ES6 arrow function is defined as\n// const Example = () => {}\n\nconst FirstChild = (props) => {\n\n  return <p>Hello, I'm the {props.text} project!</p>;\n};\n\nexport default FirstChild;\n","import React, { Component } from 'react';\nimport FirstChild from './firstChild';\n\nclass ParentComponent extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0,\n      l: [\"first\", \"second\", \"third\"],\n      text: \"first\"\n    };\n     this.increment = this.increment.bind(this);\n  }\n\n  render() {\n    return(\n      <div>\n        <h1>\n        Projects:\n        </h1>\n        <FirstChild text={this.state.text} />\n        <button onClick={this.increment}>Next project!</button>\n      </div>\n    )\n  }\n\n  increment() {\n    if (this.state.counter === this.state.l.length - 1) {\n      this.setState((state) => ({ counter: 0}));\n    } else {\n    this.setState((state) => ({ counter: state.counter + 1}));\n    }\n\n    this.setState((state) => ({ text: state.l[state.counter]}))\n\n  }\n}\n\nexport default ParentComponent;\n","import React, { Component } from 'react';\nimport ParentComponent from './parentComponent';\n\nclass Home extends Component {\n  render() {\n    return (\n        <div>\n            <ParentComponent />\n        </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n\nclass About extends Component {\n  render() {\n    return (\n        <div>\n          <h2>About</h2>\n        </div>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from 'react';\n\nclass Contact extends Component {\n  render() {\n    return (\n        <div>\n          <h2>Contact</h2>\n        </div>\n    );\n  }\n}\n\nexport default Contact;\n","import React, { Component } from 'react';\n\nclass Profile extends Component {\n  render() {\n    return (\n        <div>\n          <h2>Profile</h2>\n        </div>\n    );\n  }\n}\n\nexport default Profile;\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Home from './home';\nimport About from './about';\nimport Contact from './contact';\nimport Profile from './profile';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavbarBrand from 'react-bootstrap/NavbarBrand';\nimport NavbarCollapse from 'react-bootstrap/NavbarCollapse';\nimport NavbarContext from 'react-bootstrap/NavbarContext';\nimport NavbarToggle from 'react-bootstrap/NavbarToggle';\nimport NavContext from 'react-bootstrap/NavContext';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport NavItem from 'react-bootstrap/NavItem';\nimport NavLink from 'react-bootstrap/NavLink';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport FormControl from 'react-bootstrap/FormControl';\nimport './App.css';\n\n\nclass MyNav extends Component {\n  render() {\n    return (\n    /*<Router>\n        <div>\n            <Navbar bg=\"info\">\n                <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\n                        <Nav.Link href=\"#link\">Link</Nav.Link>\n                        <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                            <NavDropdown.Divider />\n                        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                    </NavDropdown>\n                    </Nav>\n                    <Form inline>\n                        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                        <Button variant=\"outline-success\" color=\"danger\">Search</Button>\n                    </Form>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n    </Router>*/\n\n\n\n\n\n    <Router>\n        <div>\n          <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li>ODU Connect Logo </li>\n            <li><Link to={'/'} className=\"nav-link\"> Projects </Link></li>\n            <li><Link to={'/profile'} className=\"nav-link\">Profile</Link></li>\n            <li><Link to={'/contact'} className=\"nav-link\">Contact</Link></li>\n            <li><Link to={'/about'} className=\"nav-link\">About</Link></li>\n\n\n          </ul>\n          </nav>\n          <hr />\n          <Switch>\n              <Route exact path='/' component={Home} />\n              <Route path='/contact' component={Contact} />\n              <Route path='/about' component={About} />\n              <Route path='/profile' component={Profile} />\n\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\n// Use state to show different div style based on toggle?\n\nexport default MyNav;\n","//\n\nimport React from 'react';\nimport './App.css';\n// import './Example.js';\nimport FirstChild from './firstChild';\nimport ParentComponent from './parentComponent';\nimport MyNav from './mynavbar.js'\n\n\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n\n    <MyNav />\n\n    \n\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}